org: dilumdar

app: test

service: serverless-template

frameworkVersion: "4"

plugins:
  - serverless-offline-ssm
  - serverless-offline
  - serverless-prune-plugin
  - serverless-plugin-tracing
  - ./plugins/my-plugin.js

provider:
  name: aws
  runtime: nodejs22.x
  stage: local
  region: us-west-2
  timeout: 30
  memorySize: 512
  httpApi:
    cors:
      allowedOrigins: 
        - "*"
      allowedHeaders:
        - Content-Type
        - X-Amz-Date
        - Authorization
        - refresh_token
        - grant_type
        - x-amz-security-token
        - x-amz-user-agent
        - x-amzn-trace-id
        - X-Api-Key
    authorizers:
      customAuthorizer:
        type: request
        functionName: cAuthorizer
        # caching:
        #   enabled: false
        enableSimpleResponses: true
        identitySource:
          - $request.header.Authorization
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - ssm:*
            - s3:*
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:Scan
            - dynamodb:BatchWriteItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - ses:*
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
            - cognito-idp:AdminDeleteUser
          Resource: "*"
  environment:
    ALLOWED_ORIGINS: ${ssm:/${param:stage, self:provider.stage}/lambda/COMMON/ALLOWED_ORIGINS}
  deploymentBucket:
    name: sls-template-deployment-bucket-${param:stage, self:provider.stage}

custom:
  deploymentBucket:
    versioning: true
    encryption: AES256
    tags:
      - Key: Environment
        Value: ${param:stage, self:provider.stage}
      # - Key: Service
      #   Value: ${self:service}

  headers:
    Access-Control-Allow-Headers: "Content-Type,X-Amz-Date,Authorization,x-amz-security-token,x-amz-user-agent,x-amzn-trace-id,X-Api-Key,grant_type,refresh_token"
  serverless-offline:
    httpPort: 3000
    host: 0.0.0.0
    noAuth: true
  serverless-offline-ssm:
    stages:
      - local
    ssm:
      '/local/lambda/COMMON/ALLOWED_ORIGINS': "*"
  prune:
    automatic: true
    number: 10

functions:
  common:
    handler: src/handler.run
    description: Routing event to common APIs
    tracing: Active
    architecture: arm64
    events:
      - httpApi:
          path: /v1/common/{proxy+}
          method: any
  todo:
    handler: src/handler.run
    description: Routing event to todo APIs
    tracing: Active
    architecture: arm64
    events:
      - httpApi:
          path: /v1/todo/{proxy+}
          method: any
          authorizer:
            name: customAuthorizer
  cAuthorizer:
    handler: src/handler.cAuthorizer
    description: Lambda custom authorizer

resources:
  Resources:
    StatusTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: application-status-${param:stage, self:provider.stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 1
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
    TodoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: todo-${param:stage, self:provider.stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
          - AttributeName: task
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: task
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true